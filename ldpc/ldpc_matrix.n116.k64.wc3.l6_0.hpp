#pragma once
//todo: try matrices from here: http://www.inference.org.uk/mackay/codes/data.html#s9
// https://github.com/tracierenea/GNU-Radio-GSoC2013/tree/master/alist_files

namespace ldpc
{

constexpr int c_num_h_columns = 116;                                   //aka number of bits in codeword;       usually n letter in literature
constexpr int c_message_bits = 64;                                     //original message/data to encode       usually k letter in literature
constexpr int c_check_bits = c_num_h_columns - c_message_bits;         //                                      usually M letter in literature
constexpr int c_num_h_rows = c_check_bits;                             //aka equations         1/2 rate code

constexpr int c_sparsed_max_num_columns = 9;    //maximum number of checks per row


//matrix in sparsed format as output by make-ldpc from here http://www.cs.utoronto.ca/~radford/ftp/LDPC-2012-02-11/pchk.html
//BTW big thank you to the author for his codes written in C and freely available!
//each number tells where is 1 in a row, -1 signals it's the end of the current row
//rows & columns are 0-based
constexpr int c_h_matrix[c_num_h_rows][c_sparsed_max_num_columns] = {
        {34, 50, 59, 82, 100, 105, 106, -1},
        {6, 10, 65, 73, 83, 109, -1},
        {15, 25, 39, 44, 81, 87, 90, 101, -1},
        {21, 28, 41, 42, 105, 107, -1},
        {11, 38, 61, 70, 71, 92, 97, -1},
        {23, 46, 53, 76, 80, 95, 96, -1},
        {18, 27, 33, 47, 54, 90, -1},
        {30, 49, 78, 91, 94, 98, -1},
        {6, 30, 34, 44, 45, 115, -1},
        {17, 22, 32, 63, 74, 89, 106, -1},
        {1, 3, 5, 52, 56, 68, 82, 111, -1},
        {7, 15, 24, 26, 38, 50, 62, -1},
        {25, 48, 59, 60, 93, 98, 110, -1},
        {9, 51, 86, 91, 100, 104, 113, -1},
        {0, 19, 29, 42, 57, 62, 75, 94, -1},
        {29, 55, 61, 69, 90, 100, 109, -1},
        {31, 78, 84, 95, 101, 102, -1},
        {1, 9, 17, 42, 44, 46, 71, -1},
        {22, 41, 43, 69, 72, 108, -1},
        {4, 28, 60, 74, 97, 102, 112, -1},
        {39, 58, 63, 67, 86, 88, -1},
        {19, 22, 25, 51, 53, 83, 111, -1},
        {0, 32, 35, 85, 113, -1},
        {13, 23, 32, 45, 61, 79, 110, -1},
        {13, 26, 27, 78, 83, 103, -1},
        {27, 34, 43, 64, 80, -1},
        {6, 56, 75, 86, 96, 97, -1},
        {8, 59, 71, 85, 88, 108, 114, -1},
        {18, 20, 24, 28, 30, 111, 114, -1},
        {8, 12, 19, 45, 54, 77, 84, -1},
        {16, 21, 31, 33, 37, 51, 115, -1},
        {3, 7, 21, 63, 77, 80, 98, 109, -1},
        {7, 14, 47, 79, 102, -1},
        {14, 36, 49, 55, 56, 85, 107, -1},
        {16, 40, 87, 89, 96, 114, -1},
        {43, 52, 73, 92, 101, -1},
        {1, 12, 16, 26, 35, 58, 60, 69, -1},
        {5, 29, 76, 93, 103, 115, -1},
        {46, 49, 50, 54, 67, 73, 99, 112, -1},
        {0, 11, 40, 48, 67, 68, -1},
        {8, 15, 64, 65, 68, 74, 91, -1},
        {2, 35, 47, 53, 66, 92, 105, -1},
        {2, 4, 9, 36, 40, 72, 77, 103, -1},
        {11, 12, 14, 20, 76, 81, 106, -1},
        {3, 13, 57, 66, 81, 104, 108, 112, -1},
        {18, 36, 57, 58, 65, 70, 95, -1},
        {2, 20, 31, 64, 75, 99, 110, -1},
        {10, 38, 84, 89, 93, 104, 107, -1},
        {10, 37, 39, 72, 79, 82, 94, -1},
        {4, 23, 33, 52, 62, 88, -1},
        {17, 24, 37, 48, 55, 66, -1},
        {5, 41, 70, 87, 99, 113, -1}
};

        
constexpr bool c_g_matrix[c_check_bits][c_message_bits] =
{
        { 0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,1,0,1,1},
        { 0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0},
        { 0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0},
        { 0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1},
        { 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0},
        { 0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1},
        { 0,0,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0},
        { 0,1,0,1,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0},
        { 1,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,0},
        { 0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1},
        { 0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,0},
        { 1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
        { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0},
        { 1,0,1,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0},
        { 0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        { 0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,1},
        { 0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0},
        { 0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0},
        { 0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        { 1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0,0},
        { 1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0},
        { 0,0,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1},
        { 0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1},
        { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0},
        { 1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0},
        { 0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0},
        { 0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0},
        { 0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0},
        { 0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
        { 0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0},
        { 0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0},
        { 0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0},
        { 0,0,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,0},
        { 0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1,1},
        { 0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0},
        { 0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1},
        { 0,0,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1},
        { 0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
        { 1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0},
        { 0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1},
        { 0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0},
        { 0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0},
        { 0,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0},
        { 0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,0},
        { 0,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0},
        { 0,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1},
        { 0,1,0,1,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0},
        { 0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1},
        { 0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0},
        { 0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0}
};

//message bits at end!
//in the example below it shows that codeword_to_transfer[c_g_matrix_column_order[0]] = original_codeword[0],
// codeword_to_transfer[c_g_matrix_column_order[1]] = original_codeword[1] ... so on
//original codeword consist of multiplied message at g (first c_check_bits) and the message bits itself (last c_message_bits)
constexpr int c_g_matrix_column_order[c_num_h_columns] = {
        34,  6, 15, 21, 11, 23, 18, 30, 10, 17,  1, 24, 25,  9, 19, 29, 31,  3, 22,  4,
        39,  0, 32, 13, 26, 27, 44,  8, 28, 12,  7, 33, 16, 36, 35, 43, 37,  5, 46, 40,
        45, 41, 38,  2, 14, 42, 20, 50, 49, 52, 56, 54, 48, 53, 51, 55, 47, 57, 58, 59,
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
        100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115
};
        
} //ldpc
